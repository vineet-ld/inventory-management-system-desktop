/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neu.phmis.userinterface.inventorymanager;

import com.alee.laf.optionpane.WebOptionPane;
import com.neu.phmis.business.Ecosystem;
import com.neu.phmis.business.enterprise.WarehouseEnterprise;
import com.neu.phmis.business.request.DeviceRequest;
import com.neu.phmis.business.request.OrderRequest;
import com.neu.phmis.business.request.Request;
import com.neu.phmis.business.user.InventoryManager;
import com.neu.phmis.business.util.CommonUtil;
import com.neu.phmis.userinterface.MainFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vineet
 */
public class ManageInventoryRequestsPanel extends javax.swing.JPanel {

    private Ecosystem ecosystem;
    private WarehouseEnterprise warehouseEnterprise;
    private InventoryManager inventoryManager;
    private JPanel container;

    /**
     * Creates new form ManageInventoryRequestsPanel
     */
    public ManageInventoryRequestsPanel(WarehouseEnterprise warehouseEnterprise,
            InventoryManager inventoryManager, JPanel container) {

        initComponents();

        ecosystem = Ecosystem.getInstance();
        this.warehouseEnterprise = warehouseEnterprise;
        this.inventoryManager = inventoryManager;
        this.container = container;

        populateTables();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        webPanel1 = new com.alee.laf.panel.WebPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        webPanel2 = new com.alee.laf.panel.WebPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceRequestTbl = new com.alee.laf.table.WebTable();
        viewRequestBtn = new com.alee.laf.button.WebButton();
        webPanel3 = new com.alee.laf.panel.WebPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderRequestTbl = new com.alee.laf.table.WebTable();
        addToInventoryBtn = new com.alee.laf.button.WebButton();
        addToInventoryBtn1 = new com.alee.laf.button.WebButton();
        viewBtn = new com.alee.laf.button.WebButton();

        setLayout(new java.awt.BorderLayout());

        webPanel1.setLayout(new java.awt.CardLayout());

        jTabbedPane1.setForeground(new java.awt.Color(51, 0, 255));
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        deviceRequestTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Hospital", "Created On", "Status", "Processed By"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deviceRequestTbl.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(deviceRequestTbl);

        viewRequestBtn.setForeground(new java.awt.Color(0, 0, 255));
        viewRequestBtn.setText("View");
        viewRequestBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewRequestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRequestBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout webPanel2Layout = new javax.swing.GroupLayout(webPanel2);
        webPanel2.setLayout(webPanel2Layout);
        webPanel2Layout.setHorizontalGroup(
            webPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(webPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                    .addGroup(webPanel2Layout.createSequentialGroup()
                        .addComponent(viewRequestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        webPanel2Layout.setVerticalGroup(
            webPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewRequestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Device Request", webPanel2);

        orderRequestTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Created On", "Status", "Processed On", "Order ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderRequestTbl.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(orderRequestTbl);

        addToInventoryBtn.setForeground(new java.awt.Color(0, 0, 255));
        addToInventoryBtn.setText("Add to Inventory");
        addToInventoryBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addToInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToInventoryBtnActionPerformed(evt);
            }
        });

        addToInventoryBtn1.setForeground(new java.awt.Color(0, 0, 255));
        addToInventoryBtn1.setText("Create Order Request");
        addToInventoryBtn1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addToInventoryBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToInventoryBtn1ActionPerformed(evt);
            }
        });

        viewBtn.setForeground(new java.awt.Color(0, 0, 255));
        viewBtn.setText("View");
        viewBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout webPanel3Layout = new javax.swing.GroupLayout(webPanel3);
        webPanel3.setLayout(webPanel3Layout);
        webPanel3Layout.setHorizontalGroup(
            webPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(webPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                    .addGroup(webPanel3Layout.createSequentialGroup()
                        .addComponent(addToInventoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addToInventoryBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        webPanel3Layout.setVerticalGroup(
            webPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(webPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addToInventoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToInventoryBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(96, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("My Order Request", webPanel3);

        webPanel1.add(jTabbedPane1, "card2");

        add(webPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void viewRequestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRequestBtnActionPerformed

        try {

            int selectedRow = deviceRequestTbl.getSelectedRow();

            if (selectedRow >= 0) {

                DeviceRequest deviceRequest = (DeviceRequest) deviceRequestTbl
                        .getValueAt(selectedRow, 0);
                ViewDeviceRequestPanel viewDeviceRequestPanel
                        = new ViewDeviceRequestPanel(deviceRequest,
                                inventoryManager, warehouseEnterprise,
                                container);
                CommonUtil.insertNewPanel(container, "View Device Request",
                        viewDeviceRequestPanel, null);

            } else {
                WebOptionPane.showMessageDialog(null,
                        "Please select a request", "Error",
                        WebOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_viewRequestBtnActionPerformed

    private void addToInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToInventoryBtnActionPerformed

        try {

            int selectedRow = orderRequestTbl.getSelectedRow();

            if (selectedRow >= 0) {

                OrderRequest orderRequest = (OrderRequest) orderRequestTbl
                        .getValueAt(selectedRow, 0);

                if (!orderRequest.getStatus()
                        .equals(OrderRequest.STATUS_DELIVERED)) {
                    WebOptionPane.showMessageDialog(null, "The shippment "
                            + "associated with this order is not yet "
                            + "available.", "Warning",
                            WebOptionPane.WARNING_MESSAGE);
                } else if (orderRequest.isAddedToInventory()) {
                    WebOptionPane.showMessageDialog(null, "Devices already "
                            + "added to the inventory", "Warning",
                            WebOptionPane.WARNING_MESSAGE);
                } else {

                    warehouseEnterprise.getInventory()
                            .addItemsToInventory(orderRequest.getOrder());
                    orderRequest.setAddedToInventory(true);
                    WebOptionPane.showMessageDialog(null,
                            "Items added to the inventory", "Success",
                            WebOptionPane.INFORMATION_MESSAGE);
                    CommonUtil.saveChanges(ecosystem);

                }
            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addToInventoryBtnActionPerformed

    private void addToInventoryBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToInventoryBtn1ActionPerformed

        try {

            CreateOrderDialog createOrderDialog
                    = new CreateOrderDialog(MainFrame.mainFrame, true, null,
                            warehouseEnterprise, inventoryManager, container);
            createOrderDialog.setVisible(true);

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addToInventoryBtn1ActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed

        try {

            int selectedRow = orderRequestTbl.getSelectedRow();

            if (selectedRow >= 0) {
                ViewInventoryOrderDetailDialog viewInventoryOrderDetailDialog
                        = new ViewInventoryOrderDetailDialog(
                                MainFrame.mainFrame, true,
                                (OrderRequest) orderRequestTbl
                                .getValueAt(selectedRow, 0));
                viewInventoryOrderDetailDialog.setVisible(true);
            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_viewBtnActionPerformed

    /* ---------------------------------------------------------------------- */
    /*
     Populate requests in the tables
    
     Parameters: NONE
    
     Returns: NONE
     */
    public void populateTables() {

        try {

            DefaultTableModel defaultTableModel
                    = (DefaultTableModel) deviceRequestTbl.getModel();
            defaultTableModel.setRowCount(0);

            DeviceRequest deviceRequest = null;
            Object row[];
            for (Request request : warehouseEnterprise.getDeviceRequestQueue()
                    .getRequestList()) {

                deviceRequest = (DeviceRequest) request;
                row = new Object[5];
                row[0] = deviceRequest;
                row[1] = deviceRequest.getSentBy().getEnterprise();
                row[2] = CommonUtil.changeDateFormat(deviceRequest
                        .getCreatedOn(), "dd MMM, yyyy");
                row[3] = deviceRequest.getStatus();
                row[4] = deviceRequest.getProcessedBy();
                defaultTableModel.addRow(row);

            }

            defaultTableModel = (DefaultTableModel) orderRequestTbl.getModel();
            defaultTableModel.setRowCount(0);

            OrderRequest orderRequest = null;
            for (Request request : inventoryManager.getOrderRequestQueue()
                    .getRequestList()) {

                orderRequest = (OrderRequest) request;
                row = new Object[5];
                row[0] = orderRequest;
                row[1] = CommonUtil.changeDateFormat(orderRequest
                        .getCreatedOn(), "dd MMM, yyyy");
                row[2] = orderRequest.getStatus();
                row[3] = CommonUtil.changeDateFormat(orderRequest
                        .getProcessedOn(), "dd MMM, yyyy");
                row[4] = !orderRequest.getStatus()
                        .equals(OrderRequest.STATUS_PENDING) && !orderRequest
                        .getStatus().equals(OrderRequest.STATUS_CANCELLED)
                                ? orderRequest.getOrder() : "";
                defaultTableModel.addRow(row);

            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.alee.laf.button.WebButton addToInventoryBtn;
    private com.alee.laf.button.WebButton addToInventoryBtn1;
    private com.alee.laf.table.WebTable deviceRequestTbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.alee.laf.table.WebTable orderRequestTbl;
    private com.alee.laf.button.WebButton viewBtn;
    private com.alee.laf.button.WebButton viewRequestBtn;
    private com.alee.laf.panel.WebPanel webPanel1;
    private com.alee.laf.panel.WebPanel webPanel2;
    private com.alee.laf.panel.WebPanel webPanel3;
    // End of variables declaration//GEN-END:variables
}
