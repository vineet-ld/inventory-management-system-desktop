/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neu.phmis.userinterface.inventorymanager;

import com.alee.extended.layout.VerticalFlowLayout;
import com.alee.extended.window.WebPopOver;
import com.alee.laf.label.WebLabel;
import com.alee.laf.optionpane.WebOptionPane;
import com.alee.laf.table.WebTable;
import com.neu.phmis.business.Ecosystem;
import com.neu.phmis.business.enterprise.Enterprise;
import com.neu.phmis.business.enterprise.SupplierEnterprise;
import com.neu.phmis.business.enterprise.WarehouseEnterprise;
import com.neu.phmis.business.inventory.Product;
import com.neu.phmis.business.network.Network;
import com.neu.phmis.business.organization.Organization;
import com.neu.phmis.business.organization.ProductOrganization;
import com.neu.phmis.business.request.DeviceRequest;
import com.neu.phmis.business.request.OrderRequest;
import com.neu.phmis.business.sales.Order;
import com.neu.phmis.business.sales.OrderItem;
import com.neu.phmis.business.user.InventoryManager;
import com.neu.phmis.business.user.Person;
import com.neu.phmis.business.util.CommonUtil;
import com.neu.phmis.business.util.MailUtil;
import com.neu.phmis.userinterface.MainFrame;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vineet
 */
public class CreateOrderDialog extends javax.swing.JDialog {

    private WebPopOver webPopOver;
    private Ecosystem ecosystem;
    private DeviceRequest deviceRequest;
    private ArrayList<OrderItem> orderItemList;
    private ArrayList<SupplierEnterprise> supplierList;
    private WarehouseEnterprise warehouseEnterprise;
    private InventoryManager inventoryManager;
    private JPanel container;

    /**
     * Creates new form CreateOrderDialog
     */
    public CreateOrderDialog(java.awt.Frame parent, boolean modal,
            DeviceRequest deviceRequest,
            WarehouseEnterprise warehouseEnterprise,
            InventoryManager inventoryManager, JPanel container) {

        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.deviceRequest = deviceRequest;
        this.warehouseEnterprise = warehouseEnterprise;
        this.inventoryManager = inventoryManager;
        this.container = container;

        if (deviceRequest == null) {
            wishlistLbl.setVisible(false);
        }

        ecosystem = Ecosystem.getInstance();

        networkCombo.addItem("All Regions");
        for (Network network : ecosystem.getNetworkDirectory()
                .getNetworkList()) {
            networkCombo.addItem(network);
        }

        orderItemList = new ArrayList<>();
        supplierList = new ArrayList<>();
        populateTables();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        webComboBox1 = new com.alee.laf.combobox.WebComboBox();
        webLabel1 = new com.alee.laf.label.WebLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTbl = new com.alee.laf.table.WebTable();
        networkCombo = new com.alee.laf.combobox.WebComboBox();
        searchTxt = new com.alee.laf.text.WebTextField();
        searchBtn = new com.alee.laf.button.WebButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        deviceListTbl = new com.alee.laf.table.WebTable();
        webLabel5 = new com.alee.laf.label.WebLabel();
        webLabel6 = new com.alee.laf.label.WebLabel();
        orderTotalTxt = new com.alee.laf.text.WebTextField();
        cancelBtn = new com.alee.laf.button.WebButton();
        createOrderBtn = new com.alee.laf.button.WebButton();
        addProductBtn = new com.alee.laf.button.WebButton();
        addProductBtn1 = new com.alee.laf.button.WebButton();
        quantitySpinner = new com.alee.laf.spinner.WebSpinner();
        addItemBtn = new com.alee.laf.button.WebButton();
        wishlistLbl = new com.alee.extended.label.WebStepLabel();
        viewDetailsBtn = new com.alee.laf.button.WebButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        webLabel1.setForeground(new java.awt.Color(0, 51, 255));
        webLabel1.setText("Create Order");
        webLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        orderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device", "Quantity", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTbl.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(orderTbl);

        networkCombo.setMaximumRowCount(100);
        networkCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkComboActionPerformed(evt);
            }
        });

        searchTxt.setInputPrompt("Search Device");

        searchBtn.setText("Search");
        searchBtn.setToolTipText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        deviceListTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device", "Supplier", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deviceListTbl.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(deviceListTbl);
        if (deviceListTbl.getColumnModel().getColumnCount() > 0) {
            deviceListTbl.getColumnModel().getColumn(2).setHeaderValue("Cost");
        }

        webLabel5.setText("Your Order:");
        webLabel5.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        webLabel6.setText("Order Total:");
        webLabel6.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        orderTotalTxt.setEditable(false);
        orderTotalTxt.setInputPrompt("");

        cancelBtn.setForeground(new java.awt.Color(0, 0, 255));
        cancelBtn.setText("Cancel");
        cancelBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        createOrderBtn.setForeground(new java.awt.Color(0, 0, 255));
        createOrderBtn.setText("Confirm Order");
        createOrderBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        createOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrderBtnActionPerformed(evt);
            }
        });

        addProductBtn.setText("Edit Quantity");
        addProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductBtnActionPerformed(evt);
            }
        });

        addProductBtn1.setText("Remove");
        addProductBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductBtn1ActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        addItemBtn.setText("Add to Order");
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemBtnActionPerformed(evt);
            }
        });

        wishlistLbl.setForeground(new java.awt.Color(255, 204, 0));
        wishlistLbl.setText("!");
        wishlistLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                wishlistLblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                wishlistLblMouseExited(evt);
            }
        });

        viewDetailsBtn.setText("View Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(networkCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(webLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orderTotalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(createOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addProductBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addProductBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(webLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(viewDetailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wishlistLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(webLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(webLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(wishlistLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(networkCombo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addItemBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(viewDetailsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(webLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addProductBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(webLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderTotalTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(createOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed

        try {
            this.dispose();
        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void createOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrderBtnActionPerformed

        try {

            Order order = null;
            OrderRequest orderRequest = null;

            for (SupplierEnterprise supplierEnterprise : supplierList) {

                order = new Order();

                for (OrderItem orderItem : orderItemList) {
                    if (orderItem.getSupplierEnterprise()
                            == supplierEnterprise) {
                        order.getOrderItemList().add(orderItem);
                        order.setWarehouseEnterprise(warehouseEnterprise);
                        order.setSupplierEnterprise(supplierEnterprise);
                    }
                }

                orderRequest = new OrderRequest();
                orderRequest.setOrder(order);
                orderRequest.setSentBy(inventoryManager);
                orderRequest.setStatus(OrderRequest.STATUS_PENDING);
                orderRequest.setWarehouseEnterprise(warehouseEnterprise);
                supplierEnterprise.getOrderRequestQueue().getRequestList()
                        .add(orderRequest);
                inventoryManager.getOrderRequestQueue().getRequestList()
                        .add(orderRequest);

                MailUtil mailUtil = null;
                for (Person person : supplierEnterprise
                        .getOrganization(Organization.ORGANIZATION_PRODUCT)
                        .getPersonDirectory().getPersonList()) {
                    if (person.getUserAccount().getStatus() == 1) {
                        mailUtil = new MailUtil(person.getEmailId());
                        StringBuffer stringBuffer = new StringBuffer();
                        stringBuffer.append(person).append(",\n A new order "
                                + "request has been submitted by ")
                                .append(warehouseEnterprise);
                        mailUtil.setEmailBody(stringBuffer.toString());
                        mailUtil.setEmailSubject("New Request Notification");
                        mailUtil.sendEmail();
                    }
                }

            }

            WebOptionPane.showMessageDialog(null, "Your order request has been "
                    + "sent. Please note that if your request contains devices "
                    + "from multiple vendors, multiple requests will be sent, "
                    + "one for every vendor.");

            if (deviceRequest != null) {
                deviceRequest.setStatus(DeviceRequest.STATUS_APPROVED);
                deviceRequest.setProcessedBy(inventoryManager);
                deviceRequest.setProcessedOn(new Date());

                Person person = deviceRequest.getSentBy();
                MailUtil mailUtil = new MailUtil(person.getEmailId());
                StringBuffer stringBuffer = new StringBuffer();
                stringBuffer.append(person).append(",\n Your order request "
                        + "with Request ID ").append(deviceRequest)
                        .append(" has been approved. Order for the devices "
                                + "you requested have been placed. You "
                                + "will be notified once those devices are "
                                + "available in the inventory.");
                mailUtil.setEmailBody(stringBuffer.toString());
                mailUtil.setEmailSubject("Device Request Status Update");
                mailUtil.sendEmail();
            }

            CommonUtil.saveChanges(ecosystem);
            this.dispose();

            ManageInventoryRequestsPanel manageInventoryRequestsPanel
                    = new ManageInventoryRequestsPanel(warehouseEnterprise,
                            inventoryManager, container);
            CommonUtil.insertNewPanel(container, "Manage Request Panel",
                    manageInventoryRequestsPanel, null);

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_createOrderBtnActionPerformed

    private void addProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductBtnActionPerformed

        try {

            int selectedRow = orderTbl.getSelectedRow();

            if (selectedRow >= 0) {

                ChangeQuantityDialog changeQuantityDialog
                        = new ChangeQuantityDialog(MainFrame.mainFrame, true,
                                (OrderItem) orderTbl.getValueAt(selectedRow, 0),
                                this);
                changeQuantityDialog.setVisible(true);

            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addProductBtnActionPerformed

    private void addProductBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductBtn1ActionPerformed

        try {

            int selectedRow = orderTbl.getSelectedRow();

            if (selectedRow >= 0) {

                OrderItem orderItem = (OrderItem) orderTbl
                        .getValueAt(selectedRow, 0);
                orderItemList.remove(orderItem);
                populateOrderItems();

            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addProductBtn1ActionPerformed

    private void addItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemBtnActionPerformed

        try {
            int selectedRow = deviceListTbl.getSelectedRow();

            if (selectedRow >= 0) {

                Product product = (Product) deviceListTbl
                        .getValueAt(selectedRow, 0);
                SupplierEnterprise supplierEnterprise
                        = (SupplierEnterprise) deviceListTbl
                        .getValueAt(selectedRow, 1);

                boolean itemExists = false;
                for (OrderItem orderItem : orderItemList) {
                    if (orderItem.getProduct() == product) {
                        itemExists = true;
                        orderItem.setQuantity((Integer) quantitySpinner
                                .getValue() + orderItem.getQuantity());
                    }
                }

                if (!itemExists) {
                    OrderItem orderItem = new OrderItem();
                    orderItem.setProduct(product);
                    orderItem.setSupplierEnterprise(supplierEnterprise);
                    orderItem.setQuantity((Integer) quantitySpinner.getValue());
                    orderItemList.add(orderItem);

                    if (!supplierList.contains(supplierEnterprise)) {
                        supplierList.add(supplierEnterprise);
                    }
                }

                populateOrderItems();

            } else {
                WebOptionPane.showMessageDialog(null,
                        "No product Selected!", "Warning",
                        WebOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addItemBtnActionPerformed

    private void wishlistLblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wishlistLblMouseEntered

        try {
            if (deviceRequest != null) {
                int count = 0;
                webPopOver = new WebPopOver(wishlistLbl);
                webPopOver.setCloseOnFocusLoss(true);
                webPopOver.setMargin(10);
                webPopOver.setLayout(new VerticalFlowLayout());
                webPopOver.add(new WebLabel("List of devices requested:"));
                for (String device : deviceRequest.getDeviceList()) {
                    webPopOver.add(new WebLabel(++count + ". " + device));
                }
                webPopOver.show(wishlistLbl);
            }
        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_wishlistLblMouseEntered

    private void wishlistLblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wishlistLblMouseExited
        webPopOver.dispose();
    }//GEN-LAST:event_wishlistLblMouseExited

    private void networkComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkComboActionPerformed

        try {
            if (searchTxt.getText().trim().isEmpty()) {
                populateTables();
            } else {
                populateTables(searchTxt.getText().trim());
            }
        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_networkComboActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed

        String searchText = searchTxt.getText().trim();

        if (!searchText.isEmpty()) {
            populateTables(searchText);
        }

    }//GEN-LAST:event_searchBtnActionPerformed

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed

        try {

            int selectedRow = deviceListTbl.getSelectedRow();

            if (selectedRow >= 0) {
                ViewProductDetailsInOrderDialog viewProductDetailsInOrderDialog
                        = new ViewProductDetailsInOrderDialog(
                                MainFrame.mainFrame, true,
                                (Product) deviceListTbl.getValueAt(selectedRow,
                                        0));
                viewProductDetailsInOrderDialog.setVisible(true);
            } else {
                WebOptionPane.showMessageDialog(null, "No device selected",
                        "Error", WebOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    /* ---------------------------------------------------------------------- */
    /*
     Populate requests in the tables
    
     Parameters: NONE
    
     Returns: NONE
     */
    public void populateTables() {

        try {

            DefaultTableModel defaultTableModel
                    = (DefaultTableModel) deviceListTbl.getModel();
            defaultTableModel.setRowCount(0);

            Network network;
            if (networkCombo.getSelectedIndex() == 0) {
                network = null;
            } else {
                network = (Network) networkCombo.getSelectedItem();
            }
            Object row[];
            SupplierEnterprise supplierEnterprise;

            if (network != null) {
                for (Enterprise enterprise : network
                        .getSupplierEnterpriseDirectory().getEnterpriseList()) {

                    supplierEnterprise = (SupplierEnterprise) enterprise;
                    ProductOrganization productOrganization
                            = (ProductOrganization) supplierEnterprise
                            .getOrganization(Organization.ORGANIZATION_PRODUCT);

                    for (Product product : productOrganization
                            .getProductDirectory().getProductList()) {

                        row = new Object[3];
                        row[0] = product;
                        row[1] = supplierEnterprise;
                        row[2] = "$ " + product.getProductCost();
                        defaultTableModel.addRow(row);

                    }
                }
            } else {

                for (Network n : ecosystem.getNetworkDirectory()
                        .getNetworkList()) {
                    for (Enterprise enterprise : n
                            .getSupplierEnterpriseDirectory()
                            .getEnterpriseList()) {

                        supplierEnterprise = (SupplierEnterprise) enterprise;
                        ProductOrganization productOrganization
                                = (ProductOrganization) supplierEnterprise
                                .getOrganization(
                                        Organization.ORGANIZATION_PRODUCT);

                        for (Product product : productOrganization
                                .getProductDirectory().getProductList()) {

                            row = new Object[3];
                            row[0] = product;
                            row[1] = supplierEnterprise;
                            row[2] = "$ " + product.getProductCost();
                            defaultTableModel.addRow(row);

                        }
                    }
                }

            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }

    /*
     Populate requests in the tables
    
     Parameters:
     1. searchText - STRING
    
     Returns: NONE
     */
    public void populateTables(String searchText) {

        try {

            DefaultTableModel defaultTableModel
                    = (DefaultTableModel) deviceListTbl.getModel();
            defaultTableModel.setRowCount(0);

            Network network;
            if (networkCombo.getSelectedIndex() == 0) {
                network = null;
            } else {
                network = (Network) networkCombo.getSelectedItem();
            }
            Object row[];
            SupplierEnterprise supplierEnterprise;

            if (network != null) {
                for (Enterprise enterprise : network
                        .getSupplierEnterpriseDirectory().getEnterpriseList()) {

                    supplierEnterprise = (SupplierEnterprise) enterprise;
                    ProductOrganization productOrganization
                            = (ProductOrganization) supplierEnterprise
                            .getOrganization(Organization.ORGANIZATION_PRODUCT);

                    for (Product product : productOrganization
                            .getProductDirectory().getProductList()) {
                        if (product.getProductName().contains(searchText)) {
                            row = new Object[3];
                            row[0] = product;
                            row[1] = supplierEnterprise;
                            row[2] = "$ " + product.getProductCost();
                            defaultTableModel.addRow(row);
                        }
                    }
                }
            } else {

                for (Network n : ecosystem.getNetworkDirectory()
                        .getNetworkList()) {
                    for (Enterprise enterprise : n
                            .getSupplierEnterpriseDirectory()
                            .getEnterpriseList()) {

                        supplierEnterprise = (SupplierEnterprise) enterprise;
                        ProductOrganization productOrganization
                                = (ProductOrganization) supplierEnterprise
                                .getOrganization(
                                        Organization.ORGANIZATION_PRODUCT);

                        for (Product product : productOrganization
                                .getProductDirectory().getProductList()) {
                            if (product.getProductName().contains(searchText)) {
                                row = new Object[3];
                                row[0] = product;
                                row[1] = supplierEnterprise;
                                row[2] = "$ " + product.getProductCost();
                                defaultTableModel.addRow(row);
                            }
                        }
                    }
                }

            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }

    /*
     Populate requests in the tables
    
     Parameters:
     1. searchText - STRING
    
     Returns: NONE
     */
    public void populateOrderItems() {

        try {

            DefaultTableModel defaultTableModel
                    = (DefaultTableModel) orderTbl.getModel();
            defaultTableModel.setRowCount(0);

            Double tempAmount = 0.0;

            Object row[];
            for (OrderItem orderItem : orderItemList) {

                row = new Object[3];
                row[0] = orderItem;
                row[1] = orderItem.getQuantity();
                row[2] = orderItem.getAmount();
                defaultTableModel.addRow(row);

                tempAmount += orderItem.getAmount().doubleValue();

            }

            BigDecimal temp = BigDecimal.valueOf(tempAmount);
            orderTotalTxt.setText("$ " + temp.setScale(2,
                    RoundingMode.CEILING));

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured\n" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }

    public WebTable getOrderTbl() {
        return orderTbl;
    }

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateOrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateOrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateOrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateOrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CreateOrderDialog dialog
                        = new CreateOrderDialog(new javax.swing.JFrame(), true,
                                deviceRequest, warehouseEnterprise,
                                inventoryManager, container);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.alee.laf.button.WebButton addItemBtn;
    private com.alee.laf.button.WebButton addProductBtn;
    private com.alee.laf.button.WebButton addProductBtn1;
    private com.alee.laf.button.WebButton cancelBtn;
    private com.alee.laf.button.WebButton createOrderBtn;
    private com.alee.laf.table.WebTable deviceListTbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.alee.laf.combobox.WebComboBox networkCombo;
    private com.alee.laf.table.WebTable orderTbl;
    private com.alee.laf.text.WebTextField orderTotalTxt;
    private com.alee.laf.spinner.WebSpinner quantitySpinner;
    private com.alee.laf.button.WebButton searchBtn;
    private com.alee.laf.text.WebTextField searchTxt;
    private com.alee.laf.button.WebButton viewDetailsBtn;
    private com.alee.laf.combobox.WebComboBox webComboBox1;
    private com.alee.laf.label.WebLabel webLabel1;
    private com.alee.laf.label.WebLabel webLabel5;
    private com.alee.laf.label.WebLabel webLabel6;
    private com.alee.extended.label.WebStepLabel wishlistLbl;
    // End of variables declaration//GEN-END:variables
}
