/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neu.phmis.userinterface.resourcemanager;

import com.alee.laf.optionpane.WebOptionPane;
import com.neu.phmis.business.Ecosystem;
import com.neu.phmis.business.enterprise.HospitalEnterprise;
import com.neu.phmis.business.enterprise.WarehouseEnterprise;
import com.neu.phmis.business.inventory.InventoryItem;
import com.neu.phmis.business.inventory.Product;
import com.neu.phmis.business.organization.DoctorOrganization;
import com.neu.phmis.business.organization.Organization;
import com.neu.phmis.business.organization.ResourceOrganization;
import com.neu.phmis.business.request.SurgeryRequest;
import com.neu.phmis.business.resource.MedicalStaff;
import com.neu.phmis.business.resource.Resource;
import com.neu.phmis.business.resource.Room;
import com.neu.phmis.business.schedule.Schedule;
import com.neu.phmis.business.user.ResourceManager;
import com.neu.phmis.business.util.CommonUtil;
import com.neu.phmis.business.util.MailUtil;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vineet
 */
public class SelectResourcesPanel extends javax.swing.JPanel {

    private Ecosystem ecosystem;
    private SurgeryRequest surgeryRequest;
    private ArrayList<Product> deviceList;
    private ResourceManager resourceManager;
    private WarehouseEnterprise warehouseEnterprise;
    private Date startDate;
    private Date endDate;
    ScheduleSurgeryDialog scheduleSurgeryDialog;

    /**
     * Creates new form selectResourcesPanel
     */
    public SelectResourcesPanel(SurgeryRequest surgeryRequest,
            ArrayList<Product> deviceList, ResourceManager resourceManager,
            WarehouseEnterprise warehouseEnterprise,
            ScheduleSurgeryDialog scheduleSurgeryDialog) {

        initComponents();

        ecosystem = Ecosystem.getInstance();
        this.surgeryRequest = surgeryRequest;
        this.deviceList = deviceList;
        this.resourceManager = resourceManager;
        this.warehouseEnterprise = warehouseEnterprise;
        this.scheduleSurgeryDialog = scheduleSurgeryDialog;

        startDate = surgeryRequest.getStartDate();
        endDate = surgeryRequest.getEndDate();
        dateRangeLbl.setText(CommonUtil.changeDateFormat(startDate,
                "dd MMM, yyyy") + " - " + CommonUtil
                .changeDateFormat(endDate, "dd MMM, yyyy"));
        noOfStaffLbl.setText(String.valueOf(surgeryRequest.getNoOfStaff())
                + " Staff Required");
        ArrayList<Date> availableDateList = getAvailableDates();

        for (Date date : availableDateList) {
            availableDatesCombo.addItem(CommonUtil.changeDateFormat(date,
                    "dd MMM, yyyy"));
        }

        if (!availableDateList.isEmpty()) {
            populateTables(availableDateList.get(0));
        } else {
            WebOptionPane.showMessageDialog(null,
                    "No dates available within the date range provided. Cannot "
                    + "schedule this surgery.", "Error",
                    WebOptionPane.ERROR_MESSAGE);
            surgeryRequest.setStatus(SurgeryRequest.STATUS_FAILED);
            surgeryRequest.setProcessedBy(resourceManager);
            surgeryRequest.setProcessedOn(new Date());
            surgeryRequest.setProcessComment("No dates available");
            scheduleSurgeryDialog.dispose();

            CommonUtil.saveChanges(ecosystem);
            
            MailUtil mailUtil = new MailUtil(surgeryRequest.getSentBy()
                    .getEmailId());
            StringBuffer stringBuffer = new StringBuffer();
            stringBuffer.append(surgeryRequest.getSentBy())
                    .append(",\n Your request sent on ")
                    .append(CommonUtil.changeDateFormat(surgeryRequest
                                    .getCreatedOn(), "dd MMM, yyyy"))
                    .append("for scheduling surgery could not be "
                            + "processed due to lack of resource "
                            + "availability in the given date range");
            mailUtil.setEmailSubject("Request Update Notification");
            mailUtil.sendEmail();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        webLabel1 = new com.alee.laf.label.WebLabel();
        webLabel5 = new com.alee.laf.label.WebLabel();
        dateRangeLbl = new com.alee.laf.label.WebLabel();
        webLabel7 = new com.alee.laf.label.WebLabel();
        availableDatesCombo = new com.alee.laf.combobox.WebComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTbl = new com.alee.laf.table.WebTable();
        webLabel8 = new com.alee.laf.label.WebLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        staffTbl = new com.alee.laf.table.WebTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        roomTbl = new com.alee.laf.table.WebTable();
        webLabel9 = new com.alee.laf.label.WebLabel();
        webLabel10 = new com.alee.laf.label.WebLabel();
        noOfStaffLbl = new com.alee.laf.label.WebLabel();
        scheduleBtn = new com.alee.laf.button.WebButton();
        cancelBtn = new com.alee.laf.button.WebButton();

        webLabel1.setForeground(new java.awt.Color(0, 51, 255));
        webLabel1.setText("Schedule Surgery");
        webLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        webLabel5.setText("Date Range:");
        webLabel5.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        dateRangeLbl.setText("<Date Range>");
        dateRangeLbl.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        webLabel7.setText("Select From Available Dates:");
        webLabel7.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        availableDatesCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableDatesComboActionPerformed(evt);
            }
        });

        inventoryTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device", "Condition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inventoryTbl);

        webLabel8.setText("Select Devices:");
        webLabel8.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        staffTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medical Staff", "Leader"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(staffTbl);

        roomTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Surgery Room"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(roomTbl);

        webLabel9.setText("Select Operating Room:");
        webLabel9.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        webLabel10.setText("Select Team:");
        webLabel10.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        noOfStaffLbl.setText("<No of Staff>");
        noOfStaffLbl.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        scheduleBtn.setForeground(new java.awt.Color(0, 0, 255));
        scheduleBtn.setText("Schedule");
        scheduleBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        scheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleBtnActionPerformed(evt);
            }
        });

        cancelBtn.setForeground(new java.awt.Color(0, 0, 255));
        cancelBtn.setText("Cancel");
        cancelBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(webLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(webLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(availableDatesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(webLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(webLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateRangeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(webLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(webLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noOfStaffLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(209, 209, 209))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scheduleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(webLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(webLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateRangeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(webLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availableDatesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(webLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(webLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(webLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfStaffLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scheduleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void availableDatesComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableDatesComboActionPerformed

        try {

            String selectedDate = (String) availableDatesCombo
                    .getSelectedItem();
            Date date = new SimpleDateFormat("dd MMM, yyyy", Locale.ENGLISH)
                    .parse(selectedDate);
            populateTables(date);

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_availableDatesComboActionPerformed

    private void scheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleBtnActionPerformed

        try {

            String selectedDate = (String) availableDatesCombo
                    .getSelectedItem();
            Date reservationDate = new SimpleDateFormat("dd MMM, yyyy",
                    Locale.ENGLISH).parse(selectedDate);

            int selectedRows[] = inventoryTbl.getSelectedRows();
            ArrayList<String> checkList = new ArrayList<>();

            ArrayList<InventoryItem> itemList = new ArrayList<>();

            String errorText = "";
            int errorCount = 1;

            for (int i = 0; i < selectedRows.length; i++) {
                InventoryItem inventoryItem = (InventoryItem) inventoryTbl
                        .getValueAt(selectedRows[i], 0);
                if (!checkList.contains(inventoryItem.getProduct()
                        .getProductName())) {
                    itemList.add(inventoryItem);
                    checkList.add(inventoryItem.getProduct().getProductName());
                } else {
                    errorText += errorCount + ". Multiple devices of the same "
                            + "type cannot be selected\n";
                    errorCount++;
                }
            }

            boolean check = false;
            for (Product product : deviceList) {
                check = false;
                for (InventoryItem inventoryItem : itemList) {
                    if (inventoryItem.getProduct() == product) {
                        check = true;
                        break;
                    }
                }
            }
            if (!check) {
                errorText += errorCount + ". Please select all the required "
                        + "devices\n";
                errorCount++;
            }

            selectedRows = roomTbl.getSelectedRows();
            Room room = null;

            if (selectedRows.length == 1) {
                room = (Room) roomTbl.getValueAt(selectedRows[0], 0);
            } else {
                errorText += errorCount + ". Please select a one and only one "
                        + "operating room.\n";
                errorCount++;
            }

            selectedRows = staffTbl.getSelectedRows();

            ArrayList<MedicalStaff> staffList = new ArrayList<>();

            if (selectedRows.length == surgeryRequest.getNoOfStaff()) {
                for (int i = 0; i < selectedRows.length; i++) {
                    MedicalStaff medicalStaff = (MedicalStaff) staffTbl
                            .getValueAt(selectedRows[i], 0);
                    staffList.add(medicalStaff);
                }
            } else {
                errorText += errorCount + ". Team does not have the requested "
                        + "number of members \n";
                errorCount++;
            }

            if (!staffList.isEmpty()) {
                int counter = 0;
                for (Resource resource : staffList) {
                    MedicalStaff medicalStaff = (MedicalStaff) resource;
                    if (medicalStaff.getIsLeader() == 1) {
                        counter++;
                    }
                }

                if (counter == 0) {
                    errorText += errorCount + ". Please select a medical staff "
                            + "in the team who is a team leader\n";
                    errorCount++;
                }
            }

            if (errorText.isEmpty()) {

                for (InventoryItem inventoryItem : itemList) {
                    inventoryItem.reserveDevice(reservationDate,
                            (HospitalEnterprise) resourceManager
                            .getEnterprise(), Schedule.SURGICAL_SCHEDULE);
                }
                for (Resource resource : staffList) {
                    resource.reserveResource(reservationDate,
                            (HospitalEnterprise) resourceManager
                            .getEnterprise());
                }
                room.reserveResource(reservationDate,
                        (HospitalEnterprise) resourceManager.getEnterprise());

                surgeryRequest.getSurgicalOperation()
                        .setInventoryList(itemList);
                surgeryRequest.getSurgicalOperation().setMedicalTeam(staffList);
                surgeryRequest.getSurgicalOperation().setRoom(room);
                surgeryRequest.getSurgicalOperation()
                        .setScheduleDate(reservationDate);
                surgeryRequest.setStatus(SurgeryRequest.STATUS_SCHEDULED);
                surgeryRequest.setProcessedBy(resourceManager);
                surgeryRequest.setProcessedOn(new Date());

                ((DoctorOrganization) resourceManager.getEnterprise()
                        .getOrganization(Organization.ORGANIZATION_DOCTOR))
                        .getSurgicalSchedule().getOperationList()
                        .add(surgeryRequest.getSurgicalOperation());
                ManageResourceRequestsPanel.manageResourceRequestsPanel
                        .populateTables();
                CommonUtil.saveChanges(ecosystem);
                scheduleSurgeryDialog.dispose();

                MailUtil mailUtil = null;

                mailUtil = new MailUtil(surgeryRequest.getSentBy()
                        .getEmailId());
                StringBuffer stringBuffer = new StringBuffer();
                stringBuffer.append(surgeryRequest.getSentBy()).append(",\n "
                        + "Surgery has been scheduled for ").append(CommonUtil
                                .changeDateFormat(surgeryRequest
                                        .getSurgicalOperation()
                                        .getScheduleDate(), "dd MMM, yyyy"))
                        .append(" as per your request.");
                mailUtil.setEmailBody(stringBuffer.toString());
                mailUtil.setEmailSubject("Request Update Notification");
                mailUtil.sendEmail();

            } else {
                WebOptionPane.showMessageDialog(null, errorText, "Error",
                        WebOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_scheduleBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        scheduleSurgeryDialog.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    /* 
     Get available dates for scheduling surgery
    
     Parameters: NONE
    
     Returns: NONE    
     */
    private ArrayList<Date> getAvailableDates() {

        ArrayList<Date> availableDateList = new ArrayList<>();

        try {

            Date date = startDate;
            boolean flag;

            ArrayList<Product> availableDevices;
            ArrayList<Room> availableRooms;
            ArrayList<MedicalStaff> availableStaff;

            do {

                availableDevices = new ArrayList<>();
                availableRooms = new ArrayList<>();
                availableStaff = new ArrayList<>();

                for (InventoryItem inventoryItem : warehouseEnterprise
                        .getInventory().getInventoryList()) {
                    flag = false;
                    if (deviceList.contains(inventoryItem.getProduct())) {
                        for (Schedule schedule : inventoryItem.getItemSchedule()
                                .getScheduleList()) {
                            if (schedule.getScheduleDate().equals(date)) {
                                flag = true;
                            }
                        }
                        if (!flag) {
                            availableDevices.add(inventoryItem.getProduct());
                        }
                    }

                }

                ResourceOrganization resourceOrganization
                        = (ResourceOrganization) resourceManager
                        .getOrganization();

                for (Resource resource : resourceOrganization
                        .getResourceDirectory().getRoomList()) {
                    flag = false;
                    for (Schedule schedule : resource.getResourceSchedule()
                            .getScheduleList()) {
                        if (schedule.getScheduleDate().compareTo(date)
                                == 0) {
                            flag = true;
                        }
                    }
                    if (!flag) {
                        availableRooms.add((Room) resource);
                    }
                }

                for (Resource resource : resourceOrganization
                        .getResourceDirectory().getMedicalStaffList()) {
                    flag = false;
                    for (Schedule schedule : resource.getResourceSchedule()
                            .getScheduleList()) {
                        if (schedule.getScheduleDate().compareTo(date)
                                == 0) {
                            flag = true;
                        }
                    }
                    if (!flag) {
                        availableStaff.add((MedicalStaff) resource);
                    }
                }

                if (checkAvailability(availableDevices, availableRooms,
                        availableStaff)) {
                    availableDateList.add(date);
                }

                date = CommonUtil.getNextDate(date);

            } while (date.before(endDate) || date.compareTo(endDate) == 0);

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        } finally {
            return availableDateList;
        }

    }

    /* 
     Populates data in tables
    
     Parameters: 
     1. date - DATE object
    
     Returns: NONE
     */
    private void populateTables(Date date) {

        try {

            DefaultTableModel defaultTableModel
                    = (DefaultTableModel) inventoryTbl.getModel();
            defaultTableModel.setRowCount(0);

            Object row[] = null;
            for (InventoryItem inventoryItem : warehouseEnterprise
                    .getInventory().getAvailableItems(date)) {

                if (deviceList.contains(inventoryItem.getProduct())) {
                    row = new Object[2];
                    row[0] = inventoryItem;
                    row[1] = inventoryItem.getCondition();
                    defaultTableModel.addRow(row);
                }

            }

            defaultTableModel = (DefaultTableModel) roomTbl.getModel();
            defaultTableModel.setRowCount(0);

            ResourceOrganization resourceOrganization
                    = (ResourceOrganization) resourceManager.getOrganization();
            for (Resource resource : resourceOrganization.getResourceDirectory()
                    .getAvailableResource(date, Resource.ROOM)) {

                row = new Object[1];
                row[0] = (Room) resource;
                defaultTableModel.addRow(row);

            }

            defaultTableModel = (DefaultTableModel) staffTbl.getModel();
            defaultTableModel.setRowCount(0);

            for (Resource resource : resourceOrganization.getResourceDirectory()
                    .getAvailableResource(date, Resource.MEDICAL_STAFF)) {

                row = new Object[2];
                row[0] = (MedicalStaff) resource;
                row[1] = ((MedicalStaff) resource).getIsLeader() == 1 ? "Yes"
                        : "No";
                defaultTableModel.addRow(row);

            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        }

    }

    /* 
     Filters availability lists according to request
    
     Parameters:
     availableDevices - ARRAYLIST of PRODUCT
     availableRooms - ARRAYLIST of ROOM
     availableStaff - ARRAYLIST of MEDICALSTAFF
    
     Returns:
     flag - BOOLEAN TRUE if all list are as per requirements
     flag - BOOLEAN FALSE if any of the list is not as per requirement
     */
    private boolean checkAvailability(ArrayList<Product> availableDevices,
            ArrayList<Room> availableRooms,
            ArrayList<MedicalStaff> availableStaff) {

        boolean flag = true;

        try {

            for (Product product : deviceList) {
                if (!availableDevices.contains(product)) {
                    flag = false;
                }
            }

            if (availableRooms.isEmpty()) {
                flag = false;
            }

            if (availableStaff.size() < surgeryRequest.getNoOfStaff()) {
                flag = false;
            }

            if (flag) {
                boolean isLeader = false;
                for (MedicalStaff medicalStaff : availableStaff) {
                    if (medicalStaff.getIsLeader() == 1) {
                        isLeader = true;
                    }
                }
                flag = isLeader;
            }

        } catch (Exception e) {
            WebOptionPane.showMessageDialog(null,
                    "Some Unexpected Error Occured" + e.getMessage(), "Error",
                    WebOptionPane.ERROR_MESSAGE);
        } finally {
            return flag;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.alee.laf.combobox.WebComboBox availableDatesCombo;
    private com.alee.laf.button.WebButton cancelBtn;
    private com.alee.laf.label.WebLabel dateRangeLbl;
    private com.alee.laf.table.WebTable inventoryTbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.alee.laf.label.WebLabel noOfStaffLbl;
    private com.alee.laf.table.WebTable roomTbl;
    private com.alee.laf.button.WebButton scheduleBtn;
    private com.alee.laf.table.WebTable staffTbl;
    private com.alee.laf.label.WebLabel webLabel1;
    private com.alee.laf.label.WebLabel webLabel10;
    private com.alee.laf.label.WebLabel webLabel5;
    private com.alee.laf.label.WebLabel webLabel7;
    private com.alee.laf.label.WebLabel webLabel8;
    private com.alee.laf.label.WebLabel webLabel9;
    // End of variables declaration//GEN-END:variables
}
